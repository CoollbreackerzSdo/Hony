// <auto-generated />
using System;
using Hony.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Hony.Api.Migrations
{
    [DbContext(typeof(HonyAccountsNpSqlContext))]
    [Migration("20240609025353_V1.0.2")]
    partial class V102
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Hony.Domain.Models.Account.AccountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateOnly>("RegisterDate")
                        .HasColumnType("date")
                        .HasColumnName("register_date");

                    b.Property<TimeOnly>("RegisterTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("register_time");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("UserName");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Hony.Domain.Models.Aggregates.CategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Hony.Domain.Models.Aggregates.CommentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<DateOnly>("RegisterDate")
                        .HasColumnType("date")
                        .HasColumnName("register_date");

                    b.Property<TimeOnly>("RegisterTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("register_time");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("Id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Hony.Domain.Models.Aggregates.TagEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Hony.Domain.Models.Blogs.BlogEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasColumnName("content");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("name");

                    b.Property<DateOnly>("RegisterDate")
                        .HasColumnType("date")
                        .HasColumnName("register_date");

                    b.Property<TimeOnly>("RegisterTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("register_time");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("Id");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("Hony.Domain.Models.Combinations.CategoryBlogsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Id");

                    b.ToTable("CategoryAndBlogs");
                });

            modelBuilder.Entity("Hony.Domain.Models.Combinations.TagBlogEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("Id");

                    b.HasIndex("TagId");

                    b.ToTable("TagAndBlogs");
                });

            modelBuilder.Entity("Hony.Domain.Models.Account.AccountEntity", b =>
                {
                    b.OwnsOne("Hony.Domain.Models.Account.AccountDetail", "Detail", b1 =>
                        {
                            b1.Property<Guid>("AccountEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("first_name");

                            b1.Property<string>("LastName")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("last_name");

                            b1.HasKey("AccountEntityId");

                            b1.ToTable("Accounts");

                            b1.ToJson("Detail");

                            b1.WithOwner()
                                .HasForeignKey("AccountEntityId");
                        });

                    b.OwnsOne("Hony.Domain.Models.Account.AccountSecurity", "Security", b1 =>
                        {
                            b1.Property<Guid>("AccountEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .IsUnicode(true)
                                .HasColumnType("text")
                                .HasColumnName("email");

                            b1.Property<string>("Password")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("password");

                            b1.HasKey("AccountEntityId");

                            b1.ToTable("Accounts");

                            b1.WithOwner()
                                .HasForeignKey("AccountEntityId");
                        });

                    b.Navigation("Detail");

                    b.Navigation("Security")
                        .IsRequired();
                });

            modelBuilder.Entity("Hony.Domain.Models.Aggregates.CategoryEntity", b =>
                {
                    b.OwnsOne("Hony.Domain.Models.Aggregates.OklhColor", "Color", b1 =>
                        {
                            b1.Property<Guid>("CategoryEntityId")
                                .HasColumnType("uuid");

                            b1.Property<float?>("A")
                                .HasColumnType("real");

                            b1.Property<float>("C")
                                .HasColumnType("real");

                            b1.Property<float>("H")
                                .HasColumnType("real");

                            b1.Property<float>("L")
                                .HasColumnType("real");

                            b1.HasKey("CategoryEntityId");

                            b1.ToTable("Categories");

                            b1.ToJson("Color");

                            b1.WithOwner()
                                .HasForeignKey("CategoryEntityId");
                        });

                    b.Navigation("Color")
                        .IsRequired();
                });

            modelBuilder.Entity("Hony.Domain.Models.Aggregates.CommentEntity", b =>
                {
                    b.HasOne("Hony.Domain.Models.Blogs.BlogEntity", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hony.Domain.Models.Account.AccountEntity", "Creator")
                        .WithMany("Comments")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Hony.Domain.Models.Aggregates.TagEntity", b =>
                {
                    b.OwnsOne("Hony.Domain.Models.Aggregates.OklhColor", "Color", b1 =>
                        {
                            b1.Property<Guid>("TagEntityId")
                                .HasColumnType("uuid");

                            b1.Property<float?>("A")
                                .HasColumnType("real");

                            b1.Property<float>("C")
                                .HasColumnType("real");

                            b1.Property<float>("H")
                                .HasColumnType("real");

                            b1.Property<float>("L")
                                .HasColumnType("real");

                            b1.HasKey("TagEntityId");

                            b1.ToTable("Tags");

                            b1.ToJson("Color");

                            b1.WithOwner()
                                .HasForeignKey("TagEntityId");
                        });

                    b.Navigation("Color")
                        .IsRequired();
                });

            modelBuilder.Entity("Hony.Domain.Models.Blogs.BlogEntity", b =>
                {
                    b.HasOne("Hony.Domain.Models.Account.AccountEntity", "Creator")
                        .WithMany("Blogs")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Hony.Domain.Models.Blogs.BlogDetail", "Detail", b1 =>
                        {
                            b1.Property<Guid>("BlogEntityId")
                                .HasColumnType("uuid");

                            b1.Property<int>("ReTwits")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(0)
                                .HasColumnName("re_twits");

                            b1.HasKey("BlogEntityId");

                            b1.ToTable("Blogs");

                            b1.WithOwner()
                                .HasForeignKey("BlogEntityId");
                        });

                    b.Navigation("Creator");

                    b.Navigation("Detail");
                });

            modelBuilder.Entity("Hony.Domain.Models.Combinations.CategoryBlogsEntity", b =>
                {
                    b.HasOne("Hony.Domain.Models.Blogs.BlogEntity", "Blog")
                        .WithMany("Categories")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hony.Domain.Models.Aggregates.CategoryEntity", "Category")
                        .WithMany("Blogs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Hony.Domain.Models.Combinations.TagBlogEntity", b =>
                {
                    b.HasOne("Hony.Domain.Models.Blogs.BlogEntity", "Blog")
                        .WithMany("Tags")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hony.Domain.Models.Aggregates.TagEntity", "Tag")
                        .WithMany("Blogs")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Hony.Domain.Models.Account.AccountEntity", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Hony.Domain.Models.Aggregates.CategoryEntity", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("Hony.Domain.Models.Aggregates.TagEntity", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("Hony.Domain.Models.Blogs.BlogEntity", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Comments");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
